/* Пример: АТД - массив (или множество) с элементами типа char.  
Дополнительно перегрузить следующие операции:
«[]» - доступ по индексу;
«+=» - добавить элемент в множество(типа set+char);
«+» - объединение множеств; (дружественная функция)
«==» - проверка множеств на равенство (дружественная функция). */

#include <iostream> 
#include <time.h> 
#include "SetChar.h" 

using namespace std;

int main()
{
	srand(time(NULL));
	SetChar st1(10); // с помощью конструктора устанавливаем максимальный размер массива  
	cout << "st1   => ";  
	st1.input(5); // передаем текущий размер массива для заполнения элементов рандомными значениями 
	st1.print(); 

	SetChar st2(10);  	
	cout << "st2   => ";  	
	st2.input(5);
	st2.print();

	// срабатывает перегруженный оператор []
	cout << "-------------------------------------" << endl << "st1[2]=> " << "[" << st1[2] << "]" << endl;   
	cout << "st1[3]=  100" << endl << "st1   => ";  
	st1[3] = 100; // срабатывает перегруженный оператор []  
	st1.print(); 

	cout << "-------------------------------------" << endl;
	if (st1 == st2) cout << "st1   == st2 [set equal]" << endl; // срабатывает перегруженный оператор == 
	else cout << "st1   == st2 [set no equal]" << endl;
	SetChar st3 = st2; // срабатывает перегруженный оператор = 
	cout << "-------------------------------------" << endl << "st3   =  st2" << endl << "st3   => ";  	
	st3.print();
	if (st3 == st2) cout << "st3   == st2 [set equal]" << endl; // срабатывает перегруженный оператор == 
	else cout << "st3   == st2 [set no equal]" << endl;
	SetChar st4;
	st4 = st1 + st2; // срабатывают перегруженные операторы + и =  	
	cout << "-------------------------------------" << endl << "st4   =  st1 + st2" << endl;  
	st4.print(); 

	st4 += 't'; // срабатывает перегруженный оператор += 
	cout << "-------------------------------------" << endl << "st4   += 't'" << endl;  	
	st4.print();

	SetChar st5;
	st5 = st1 * st2; // срабатывают перегруженные операторы * и =  
	cout << "-------------------------------------" << endl << "st5   =  st1 * st2" << endl;  	
	st5.print(); 

	system("pause");
	return 0;
}
